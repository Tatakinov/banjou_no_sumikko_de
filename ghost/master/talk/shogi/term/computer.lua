local KifuPlayer  = require("kifu_player")
local StringBuffer  = require("string_buffer")

return {
  {
    id  = "将棋用語_コンピューター",
    content = [[
\0
\_q
評価値 Mate\n
評価関数\n
2駒関係 3駒関係 4駒関係 NNUE DeepLearning\n
探索部\n
枝刈り\n
\n
\![*]\q[戻る,将棋用語] \![*]\q[閉じる,閉じる]\n
\_q
]],
  },
  {
    anchor  = true,
    id  = "評価値",
    content = [[
\0
\_q【評価値】\_q\w9\n
将棋ソフトが局面の良し悪しを計算した数値のことで、
形勢の有利不利を表しているよ。数値が＋なら有利、ーなら不利ということになるね。\n
また、数字が大きければ大きいほど有利になるよ。
ソフトにもよるけど、目安としては500〜(有利)、1500〜(優勢)、2500〜(勝勢)かな。\n
\n
ただし、この数値はソフトが現在の局面から、ソフトが考える最善手の応酬をした
数手〜数十手後の局面を計算して求めた数値が表示されるので、
コンピュータの考えている手と別の手を指せば数値が上下することには注意が必要だよ。\n
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
  {
    anchor  = true,
    id  = "Mate",
    content = function(shiori, ref)
      local str = StringBuffer()
      str:append([[
\0
\_q【Mate】\_q\w9\n
正しく指せばn手以内に詰む状態のことを指すよ。\n
Mate9なら9手以内に詰むってことだね。\n
よく勘違いされるけど、Mateだからといって即詰みがあるわけじゃないよ。\n
\n
]])
      local player  = KifuPlayer.getInstance()
      player:setPosition("7kl/9/9/9/9/9/PP7/LS7/KN7 b GSN2r2b3g2s2n2l16p 1")
      str:append(shiori:talk("OnShogiViewMinimal"))
      str:append([[
\0
たとえばこの局面、コンピューターは「▲２三銀でMate5」という計算結果を出すけど、
▲２三銀は王手じゃないよね？\n
\n
こんな感じで必至がかかる場合もMateは使われるので、
詰みかどうかは読み筋を確認してみるといいかも。\n
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]])
      return str
    end,
  },
  {
    anchor  = true,
    id  = "評価関数",
    content = [[
\0
\_q【評価関数】\_q\w9\n
評価関数は将棋エンジンの核とも言える部分で、人間でいうところの「対局観」に相当するものだよ。\n
この評価関数が正確なものであればあるほど強いことになるね。\n
\n
この「正確さ」を求めて色んな評価関数が考案されていて、
最近はニューラルネットワークを用いたものが流行っているよ。
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
  {
    anchor  = true,
    id  = "2駒関係",
    content = [[
\0
\_q【2駒関係】\_q\w9\n
評価関数の一種で、「現局面の状態」に
2つの駒の位置関係を使うもののことだよ。\n
先手の７八玉と先手の１七歩は50点、先手の７八玉と後手の８二飛車は-303点…みたいな感じで
すべての駒の組み合わせを足していって、その合計が評価値の一部になるよ。\n
入力している情報の量が少ないから計算量は少ない方だけど、
その分評価値も大雑把になってしまうので、今はあんまり主流じゃないみたい。\n
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
  {
    anchor  = true,
    id  = "3駒関係",
    content = [[
\0
\_q【3駒関係】\_q\w9\n
評価関数の一種で、「現局面の状態」に
3つの駒の位置関係を使っているもののことだよ。\n
2駒関係より計算量は増えるものの、
計算量が増えるコストより
局面を正確に評価出来るリターンの方が多かったため一時期流行したよ。\n
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
  {
    anchor  = true,
    id  = "4駒関係",
    content = [[
\0
\_q【4駒関係】\_q\w9\n
評価関数の一種で、「現局面の状態」に
4つの駒の位置関係を使っているもののことだよ。\n
3駒よりうまく局面を捉えることが出来る一方、
位置関係に使う駒の数が増えることで
計算量が増大して探索が十分に出来ないみたい。
その結果、総合的な強さは3駒関係に劣るんだって。
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
  {
    anchor  = true,
    id  = "NNUE",
    content = [[
\0
\_q【NNUE】\_q\w9\n
ニューラルネットワークを使って計算する評価関数。\n
通常、ニューラルネットワークを用いた計算は
GPUの得意分野だからGPUが使われることが多いんだけど、
それをうまいことCPUで高速に計算出来るようにしたのがこのNNUE。\n
\n
わたしもよく分かってないけど、3駒関係と比べて計算速度をそこまで落とさずに、
かつニューラルネットワークを使うことでDeepLearningのような大局観の強さを
得られている……感じなのかな。\n
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
  {
    anchor  = true,
    id  = "DeepLearning",
    content = [[
\0
\_q【DeepLearning】\_q\w9\n
ディープラーニングを用いた評価関数。\n
なんかいい感じに大局観が強くなるみたい。\n
その大局観の優秀さはNNUEがウン千万局面読んで出した思考結果に
数万局面で辿り着くほど。
ただ、1局面読むのに掛かる時間がNNUEより多く時間が掛かるため、
実際は少し強いくらいに落ち着いてるよ。\n
DeepLearningを使ったソフトの傾向としては、
大局観がものをいう序中盤はNNUEより優れているものの、
終盤の詰みが絡んでくる部分になると詰みを見逃して頓死することがあるって感じ。
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
  {
    anchor  = true,
    id  = "探索部",
    content = [[
\0
\_q【探索部】\_q\w9\n
探索部は、人間でいうところの「読み」に相当する部分だよ。\n
しらみつぶしに合法手を全部読むわけではなく、
見込みの無い手についてはそれ以上読まないようにする「枝刈り」を行っているのがミソ。\n
しらみつぶしに読んでしまうと、いかにコンピューターの性能が良くても
10手先の局面を読むことすらままならないけど、
枝刈りのおかげで、数秒で20手くらい先まで読むことが出来るよ。\n
でも、枝刈りしすぎると良い手まで枝刈りしちゃうこともあるみたい。
\n
\![*]\q[戻る,将棋用語_コンピューター] \![*]\q[閉じる,閉じる]\n
]],
  },
}
